##
##  SOURCE-SHIPPING TOOLS MAKEFILE
##  $Id: Makefile.salz,v 3.0.3.2 1993/08/25 17:04:18 ram Exp $
##

# $Log: Makefile.salz,v $
# Revision 3.0.3.2  1993/08/25  17:04:18  ram
# patch12: cleanup checkin for RCS 5.6
#
# Revision 3.0.3.1  91/04/07  18:48:59  ram
# patch1: merged official cshar 3.0 into beta version
# 

##  Grrr...
SHELL	= /bin/sh

##  Which one are you editing?
CONFIG	= config.bsd

##  Put -D options here, if they're not in your config.h
DEFS	=

##  Flags for the Compiler, the linker, and lint
#CC	=
CFLAGS	= $(DEFS) -g
LINKF	=
LINTF	= $(DEFS) -a -b -h

##  How to remove a file, create one, or make one read-only
REMOVE	= rm -f
#REMOVE	= -rm /f
TOUCH	= -touch
READ_ONLY	= chmod 444
#READ_ONLY	= echo Do not edit

##  Prolog -- first file that should be linked in.
PROLOG	=

##  Microsoft C, v5.0.
##  NOTE:  You will have to rename *.o to *.obj, and add .exe in a few
##  places.  This makefile is ugly enough; I refuse to do it.
#CC	= cl
#MODEL	= S
#CFLAGS	= -A$(MODEL) -Zid -Od -W3
#CFLAGS	= -A$(MODEL) -O
#LINKF	= -link /stack:0x4000 /noe
#PROLOG	= c:\msc\lib\$(MODEL)setargv.obj
#.c.obj:
#	$(CC) $(CFLAGS) -c $*.c

##  If the directory library is built into the shar library, edit these
##  two lines.
#DIRSRC	= dir###.c
#DIROBJ	= dir###.o
DIRSRC	=
DIROBJ	=

##  If the directory library is somewhere else, use this.
#DIRLIB	= -lndir
DIRLIB	=

##  The shar package has a local library that it builds.  Define its name.
MYLIB	= lib.a
#MYLIB	= lib.lib

##  Specify how to make the library
MKLIB	= ar cr $(MYLIB) $(LIB_OBJ)
#MKLIB	= ar cr $(MYLIB) `lorder $(LIB_OBJ) | tsort`
#MKLIB	= archive -u $(MYLIB) $(LIB_OBJ)
#MKLIB	= lib unix -+glue -+parser -+lcwd -+lexec -+lfiles -+lhost \
#		-+llib -+lmem -+luser -+uuencode -+wildmat -+dirmsd;

##  Specify how to finish off the library.
RANLIB	= ranlib $(MYLIB)
#RANLIB	= @echo
#RANLIB = genlib lib.lib $(MYLIB)

##  Where executables are installed.
DESTDIR	= $(HOME)/BIN/SUN4

##  The programs.  You might not want to install everything.
UUSTUFF	= uuencode uudecode
PROGRAMS= findsrc makekit maniscan manipull shar unshar shell $(UUSTUFF)

##  The "foo" manpage will get put in $(MANDIR)/foo.$(MANEXT)
MANDIR	= /usr/man/man1
MANEXT	= 1
#MANDIR	= /usr/man/u_man/manl
#MANEXT	= 1L
#MANDIR	= /usr/man/local/man1
#MANEXT	= 1
#MANDIR	= /usr/man/man.M
#MANEXT	= M

##  Documentation.  You might not want to install everything.
MANPAGES= findsrc.man makekit.man maniscan.man manipull.man \
	shar.man unshar.man shell.man uuencode.man uudecode.man
##  For systems without nroff manpages are nearly useless.  But see the
##  "doc" target before giving this package to one of those systems.
#MANPAGES=

##
##  END OF MAIN CONFIGURATION SECTION
##

##  UNOS needs this default rule, can you believe it?
#.SUFFIXES	:	.o
#.c.o		:
#	$(CC) $(CFLAGS) -c $<

##  Header files.
HDRS	= shar.h config.h

##  If you want to keep lpt-formatted manpages around, use this.
DOCPAGES= findsrc.doc makekit.doc maniscan.doc manipull.doc \
	shar.doc unshar.doc shell.doc uuencode.doc uudecode.doc
.SUFFIXES	:	.doc .man
.man.doc	:
	@$(REMOVE) $@
	sh dodoc.sh $*
	@$(READ_ONLY) $@

##  Our library of utility functions.
LIB_SRC	= glue.c parser.c lcwd.c lexec.c lfiles.c lhost.c llib.c \
	lmem.c luser.c uuencode.c wildmat.c $(DIRSRC)
LIB_OBJ	= glue.o parser.o lcwd.o lexec.o lfiles.o lhost.o llib.o \
	lmem.o luser.o uuencode.o wildmat.o $(DIROBJ)


all		:	$(PROGRAMS) $(MANPAGES)
	$(TOUCH) all

doc		:	dodoc.sh $(DOCPAGES)
	$(TOUCH) doc

##  You might want to change these actions.  It would be nice if everyone
##  had the same install program.
install		:	all install_bin install_man
	$(TOUCH) install

install_bin	: $(PROGRAMS)
	cd $(DESTDIR) ; $(REMOVE) $(PROGRAMS)
	cp $(PROGRAMS) $(DESTDIR)
	cd $(DESTDIR) ; strip $(PROGRAMS) ; chmod 755 $(PROGRAMS)
#	cd $(DESTDIR) ; /etc/chown root $(PROGRAMS)
	$(TOUCH) install_bin

install_man	: $(MANPAGES)
	if test `pwd` != $(MANDIR) ; then \
	    for I in $(MANPAGES) ; do \
		cp $$I $(MANDIR)/`basename $$I .man`.$(MANEXT); \
	    done ; \
	fi
	$(TOUCH) install_man

clean		:
	$(REMOVE) *.[oa] *.doc *.BAK $(PROGRAMS) unshar2
	$(REMOVE) lint lib.ln tags core foo a.out
	$(REMOVE) Part?? all install install_bin install_man doc clean
#	$(REMOVE) *.obj *.lib *.exe


##  Header hacking.
$(LIB_OBJ)	:	$(HDRS)
config.h	:	$(CONFIG)
	@$(REMOVE) config.h
	cp $(CONFIG) config.h
	@$(READ_ONLY) config.h


##  Programs.
findsrc		:	findsrc.o $(MYLIB)
	@$(REMOVE) findsrc
	$(CC) $(CFLAGS) -o findsrc \
		$(PROLOG) findsrc.o $(MYLIB) $(DIRLIB) $(LINKF)

makekit		:	makekit.o $(MYLIB)
	@$(REMOVE) makekit
	$(CC) $(CFLAGS) -o makekit \
		$(PROLOG) makekit.o $(MYLIB) $(DIRLIB) $(LINKF)

maniscan	:	maniscan.o $(MYLIB)
	@$(REMOVE) maniscan
	$(CC) $(CFLAGS) -o maniscan \
		$(PROLOG) maniscan.o $(MYLIB) $(DIRLIB) $(LINKF)

manipull	:	manipull.o $(MYLIB)
	@$(REMOVE) manipull
	$(CC) $(CFLAGS) -o manipull \
		$(PROLOG) manipull.o $(MYLIB) $(DIRLIB) $(LINKF)

shar		:	shar.o $(MYLIB)
	@$(REMOVE) shar
	$(CC) $(CFLAGS) -o shar \
		$(PROLOG) shar.o $(MYLIB) $(DIRLIB) $(LINKF)

shell		:	shell.o $(MYLIB)
	@$(REMOVE) shell
	$(CC) $(CFLAGS) -o shell \
		$(PROLOG) shell.o $(MYLIB) $(DIRLIB) $(LINKF)

uudecode	:	uudecode.o $(MYLIB)
	@$(REMOVE) uudecode
	$(CC) $(CFLAGS) -o uudecode \
		$(PROLOG) uudecode.o $(MYLIB) $(DIRLIB) $(LINKF)

uuencode	:	uuenmain.o $(MYLIB)
	@$(REMOVE) uuencode
	$(CC) $(CFLAGS) -o uuencode \
		$(PROLOG) uuenmain.o $(MYLIB) $(DIRLIB) $(LINKF)

unshar		:	unshar.o $(MYLIB)
	@$(REMOVE) unshar
	$(CC) $(CFLAGS) -o unshar \
		$(PROLOG) unshar.o $(MYLIB) $(DIRLIB) $(LINKF)

##  Special case, a version of unshar that uses the /bin/sh interpreter.
unshar2		:	unshar.c $(HDRS) $(MYLIB)
	@$(REMOVE) unshar2 unshar.o
	$(CC) $(CFLAGS) -DUSE_MY_SHELL -o unshar \
		$(PROLOG) unshar.c $(MYLIB) $(DIRLIB) $(LINKF)
	@$(REMOVE) unshar.o


##  Support your local library.
$(MYLIB)	:	$(LIB_OBJ)
	@$(REMOVE) $(MYLIB)
	$(MKLIB)
	$(RANLIB)

##  Lint; this is probably only good for BSD-derived lints.
##  A slight speed hack...
X	= exec
lint		:	$(PROGRAMS) lib.ln
	@$(REMOVE) lint
	$(X) lint $(LINTF) -u $(LIB_SRC)          >lint
	$(X) lint $(LINTF)    findsrc.c   lib.ln >>lint
	$(X) lint $(LINTF)    makekit.c   lib.ln >>lint
	$(X) lint $(LINTF)    maniscan.c  lib.ln >>lint
	$(X) lint $(LINTF)    manipull.c  lib.ln >>lint
	$(X) lint $(LINTF)    shar.c      lib.ln >>lint
	$(X) lint $(LINTF)    shell.c     lib.ln >>lint
	$(X) lint $(LINTF)    unshar.c    lib.ln >>lint
	$(X) lint $(LINTF) -DUSE_MY_SHELL unshar.c lib.ln >>lint
	-checknr -c.BI.IR.SS  *.man              >>lint

lib.ln		:	$(LIB_SRC)
	@$(REMOVE) lib.ln
	lint -CX $(LIB_SRC)
	mv llib-lX.ln lib.ln
